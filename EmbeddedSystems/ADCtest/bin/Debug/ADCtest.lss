
bin\Debug\ADCtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000239  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000196  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000219  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000105  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000002b  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

void InitADC(){
    ADMUX = (1 << REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1 << ADEN) | (7 << ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
}
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch){
    ADMUX &= 0xf8;
  8e:	80 91 7c 00 	lds	r24, 0x007C
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	80 93 7c 00 	sts	0x007C, r24
    ch = ch & 0b00000111;
    ADCSRA |= (1 << ADSC);
  98:	80 91 7a 00 	lds	r24, 0x007A
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1 << ADIF)));
  a2:	80 91 7a 00 	lds	r24, 0x007A
  a6:	84 ff       	sbrs	r24, 4
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <ReadADC+0x14>
    ADCSRA |= (1 << ADIF);
  aa:	80 91 7a 00 	lds	r24, 0x007A
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
}
  bc:	c9 01       	movw	r24, r18
  be:	08 95       	ret

000000c0 <main>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

void InitADC(){
    ADMUX = (1 << REFS0);
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1 << ADEN) | (7 << ADPS0);
  c6:	87 e8       	ldi	r24, 0x87	; 135
  c8:	80 93 7a 00 	sts	0x007A, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	40 e9       	ldi	r20, 0x90	; 144
  ce:	51 e0       	ldi	r21, 0x01	; 1
}

uint16_t ReadADC(uint8_t ch){
    ADMUX &= 0xf8;
  d0:	80 91 7c 00 	lds	r24, 0x007C
  d4:	88 7f       	andi	r24, 0xF8	; 248
  d6:	80 93 7c 00 	sts	0x007C, r24
    ch = ch & 0b00000111;
    ADCSRA |= (1 << ADSC);
  da:	80 91 7a 00 	lds	r24, 0x007A
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1 << ADIF)));
  e4:	80 91 7a 00 	lds	r24, 0x007A
  e8:	84 ff       	sbrs	r24, 4
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <main+0x24>
    ADCSRA |= (1 << ADIF);
  ec:	80 91 7a 00 	lds	r24, 0x007A
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
  f6:	80 91 78 00 	lds	r24, 0x0078
  fa:	90 91 79 00 	lds	r25, 0x0079
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	ca 01       	movw	r24, r20
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x44>
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	20 3d       	cpi	r18, 0xD0	; 208
 110:	38 07       	cpc	r19, r24
 112:	b9 f7       	brne	.-18     	; 0x102 <main+0x42>
 114:	dd cf       	rjmp	.-70     	; 0xd0 <main+0x10>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

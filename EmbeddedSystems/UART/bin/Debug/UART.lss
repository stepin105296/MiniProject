
bin\Debug\UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002dc  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c5  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c1  00000000  00000000  000006d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000128  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000066  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
    char data;
    DDRB |= (1 << PB0);
  84:	20 9a       	sbi	0x04, 0	; 4
    USARTInit(103);
  86:	87 e6       	ldi	r24, 0x67	; 103
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 66 00 	call	0xcc	; 0xcc <USARTInit>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	c0 e9       	ldi	r28, 0x90	; 144
  90:	d1 e0       	ldi	r29, 0x01	; 1

    while(1){
        data = USARTReadChar();
  92:	0e 94 71 00 	call	0xe2	; 0xe2 <USARTReadChar>
        if(data == 'A'){
  96:	81 34       	cpi	r24, 0x41	; 65
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
            PORTB |= (1 << PB0);
  9a:	28 9a       	sbi	0x05, 0	; 5
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	ce 01       	movw	r24, r28
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x22>
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	20 3d       	cpi	r18, 0xD0	; 208
  ae:	38 07       	cpc	r19, r24
  b0:	b9 f7       	brne	.-18     	; 0xa0 <main+0x20>
            _delay_ms(200);
            PORTB &= ~(1 << PB0);
  b2:	28 98       	cbi	0x05, 0	; 5
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ce 01       	movw	r24, r28
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	20 3d       	cpi	r18, 0xD0	; 208
  c6:	38 07       	cpc	r19, r24
  c8:	b9 f7       	brne	.-18     	; 0xb8 <main+0x38>
  ca:	e3 cf       	rjmp	.-58     	; 0x92 <main+0x12>

000000cc <USARTInit>:
#include <avr/io.h>
#include <util/delay.h>

void USARTInit(uint16_t ubrr_value){
    UBRR0L = ubrr_value;
  cc:	80 93 c4 00 	sts	0x00C4, r24
    UBRR0H = (ubrr_value >> 8) & 0x00ff;
  d0:	90 93 c5 00 	sts	0x00C5, r25
    UCSR0C = (1 << UMSEL00) | (1 << UCSZ01) | (1 << UCSZ00);
  d4:	86 e4       	ldi	r24, 0x46	; 70
  d6:	80 93 c2 00 	sts	0x00C2, r24

    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0) | (1 << TXCIE0);
  da:	88 ed       	ldi	r24, 0xD8	; 216
  dc:	80 93 c1 00 	sts	0x00C1, r24

}
  e0:	08 95       	ret

000000e2 <USARTReadChar>:

char USARTReadChar(){
    while(!(UCSR0A & (1 << RXC0))){
  e2:	80 91 c0 00 	lds	r24, 0x00C0
  e6:	87 ff       	sbrs	r24, 7
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <USARTReadChar>

    }

    return UDR0;
  ea:	80 91 c6 00 	lds	r24, 0x00C6
}
  ee:	08 95       	ret

000000f0 <USARTWriteChar>:

void USARTWriteChar(char data){
  f0:	98 2f       	mov	r25, r24
        while(!(UCSR0A & (1 << UDRE0))){
  f2:	80 91 c0 00 	lds	r24, 0x00C0
  f6:	85 ff       	sbrs	r24, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <USARTWriteChar+0x2>

        }
        UDR0 = data;
  fa:	90 93 c6 00 	sts	0x00C6, r25
}
  fe:	08 95       	ret

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>

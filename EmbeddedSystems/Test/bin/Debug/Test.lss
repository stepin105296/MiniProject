
bin\Debug\Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000202  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000060  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000095  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000341  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000218  00000000  00000000  0000063b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000124  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitADC>:
#include<avr/io.h>
#include <stdlib.h>

void InitADC(){
    ADMUX = (1 << REFS0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1 << ADEN) | (7 << ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24
}
  9c:	08 95       	ret

0000009e <ReadADC>:
uint16_t ReadADC(uint8_t ch){
    ADMUX &= 0xf8;
  9e:	80 91 7c 00 	lds	r24, 0x007C
  a2:	88 7f       	andi	r24, 0xF8	; 248
  a4:	80 93 7c 00 	sts	0x007C, r24
    ch = ch & 0b00000111;
    ADCSRA |= (1 << ADSC);
  a8:	80 91 7a 00 	lds	r24, 0x007A
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1 << ADIF)));
  b2:	80 91 7a 00 	lds	r24, 0x007A
  b6:	84 ff       	sbrs	r24, 4
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <ReadADC+0x14>
    ADCSRA |= (1 << ADIF);
  ba:	80 91 7a 00 	lds	r24, 0x007A
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
  c4:	20 91 78 00 	lds	r18, 0x0078
  c8:	30 91 79 00 	lds	r19, 0x0079
}
  cc:	c9 01       	movw	r24, r18
  ce:	08 95       	ret

000000d0 <__vector_1>:
    };

    return 0;
}

ISR(INT0_vect){
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
    FLAG = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 01 01 	sts	0x0101, r25
  e6:	80 93 00 01 	sts	0x0100, r24
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
unsigned volatile FLAG = 0;

int main(void)
{

    port();
  f8:	0e 94 a9 00 	call	0x152	; 0x152 <port>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  fc:	40 e9       	ldi	r20, 0x90	; 144
  fe:	51 e0       	ldi	r21, 0x01	; 1

    while(1){
        if(FLAG == 1){
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	90 91 01 01 	lds	r25, 0x0101
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	91 f0       	breq	.+36     	; 0x130 <main+0x38>
            PORTB |= (1 << PB0);
            _delay_ms(1000);
            FLAG = 0;
        }
        else{
            PORTB &= ~(1 << PB0);
 10c:	28 98       	cbi	0x05, 0	; 5
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	ca 01       	movw	r24, r20
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x1c>
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11c:	87 e2       	ldi	r24, 0x27	; 39
 11e:	20 31       	cpi	r18, 0x10	; 16
 120:	38 07       	cpc	r19, r24
 122:	b9 f7       	brne	.-18     	; 0x112 <main+0x1a>
{

    port();

    while(1){
        if(FLAG == 1){
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	71 f7       	brne	.-36     	; 0x10c <main+0x14>
            PORTB |= (1 << PB0);
 130:	28 9a       	sbi	0x05, 0	; 5
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	ca 01       	movw	r24, r20
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x40>
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	87 e2       	ldi	r24, 0x27	; 39
 142:	20 31       	cpi	r18, 0x10	; 16
 144:	38 07       	cpc	r19, r24
 146:	b9 f7       	brne	.-18     	; 0x136 <main+0x3e>
            _delay_ms(1000);
            FLAG = 0;
 148:	10 92 01 01 	sts	0x0101, r1
 14c:	10 92 00 01 	sts	0x0100, r1
 150:	d7 cf       	rjmp	.-82     	; 0x100 <main+0x8>

00000152 <port>:
#include <avr/io.h>
#include <avr/interrupt.h>

void port() {
    DDRB |= (1 << PB0);
 152:	20 9a       	sbi	0x04, 0	; 4
    DDRD &= ~(1 << PD2);
 154:	52 98       	cbi	0x0a, 2	; 10
    PORTD = (1 << PD2);
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	8b b9       	out	0x0b, r24	; 11
    EICRA |= (1 << ISC00);
 15a:	e9 e6       	ldi	r30, 0x69	; 105
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
    sei();
 164:	78 94       	sei
    EIMSK |= (1 << INT0);
 166:	e8 9a       	sbi	0x1d, 0	; 29
}
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
